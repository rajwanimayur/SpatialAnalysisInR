df.m <- gather(df, key = "Year", value = "Persons_Injured", colnames(df)[2:5])
library(ggplot2)
p1 <- ggplot(data = df.m[startsWith(df.m$ST_NM, "M"),],
aes(x = Year, y = Persons_Injured)) +
geom_point(aes(size = Persons_Injured, color = Year)) +
facet_wrap(~ST_NM)
p1 + ggtitle("Number of Persons Injured in Road Accidents") +  theme(legend.position = "bottom")
states_df <- broom::tidy(states)
library(dplyr)
# head(states_df, n = 2) # Investigate the tide-ied data
states$id <- row.names(states) #Allocate an id variable to sp data
# head(states@data, n = 2) # A check before we join
states_df <- left_join(states_df, states@data)
map <- ggplot(data = states_df, aes(x = long, y = lat, group = group, fill = State.UT.wise.Total.Number.of.Persons.Injured.in.Road.Accidents.during...2015))+ # define variables
geom_polygon() + # Plot the states
coord_equal() + # fixed x & y scales
labs(x = "longitude", y = "latitude", fill = "Number of Persons_Injured") + #Labels
ggtitle("Road Accidents in India (2015)") + #title
scale_fill_gradient(low = "white", high = "green") #colours
map #Figure 4
# load the saved R object
# accidents_df<- readRDS(file = "Data/Statewise_Yearly_Road_Accidents_India.Rds")
# Preparing the Spatial Object
states_df <- left_join(states_df, df.m)
ggplot(data = states_df,
aes(x = long, y = lat, fill = Persons_Injured, group = group)) + #defining Variables
geom_polygon() + #plot states map
geom_path(colour = "black", lwd = 0.05) + # states borders
coord_equal() + #fixed x and y scales
facet_wrap(~ Year) + # one plot per year
scale_fill_gradient(low = "white", high = "green",
name = "No. of Persons Injured") + # legend options
theme(axis.text = element_blank(), # remove axis lables
axis.title = element_blank(), # remove axis titles
axis.ticks = element_blank()) # remove axis ticks
library(tidyr)
accidents_df.m <- gather(df, key = "Year", value = "Persons_Injured", colnames(df)[2:5])
library(rgdal)
states_raw <- readOGR(dsn = "Data/States/states.shp", stringsAsFactors = FALSE)
states <- states_raw
slotNames(states)
#We first see the classes of all variables in spatial dataset
sapply(states@data, class)
states@data[startsWith(states$ST_NM, "A"),]
sel <- startsWith(states$ST_NM, "A")
plot(states[sel,])  # See Figure 1
#Plotting initial graph
plot(states, col = "lightgray")
sel <- startsWith(states$ST_NM, "A")
plot(states[sel,], col = "blue", add = TRUE)  #See Figure 2
states@proj4string
# Remove the existing CRS Information first.
proj4string(states) <- NA_character_
proj4string(states) <- CRS("+init=epsg:27700")
library(rgeos)
plot(states, col = "grey")
#Find India geographic centroid
cent_del <- gCentroid(states[states$ST_NM == "NCT of Delhi",])
points(cent_del, cex = 3)
#Set  2° buffer
del_buffer <- gBuffer(spgeom = cent_del, width = 2)
# We first select any intersecting zones
del_central <-  states[del_buffer,]
# Now we plot our selection
plot(del_central, col = "lightblue", add = T)
# Next we highlight the buffer area
plot(del_buffer, add = T, border = "red", lwd = 2)
# Read csv file and Create a new data frame object accidents
accidents_raw<- read.csv("Data/Road_Accidents_2017-Annuxure_Tables_4.csv", stringsAsFactors = FALSE)
accidents <- accidents_raw #Avoid Re-Reading of CSV File
accidents$States.UTs[!accidents$States.UTs %in% states$ST_NM]
states$ST_NM[!states$ST_NM %in% accidents$States.UTs]
states@data <- edit(states@data)
library(dplyr)  #load dplyr
states@data <- inner_join(states@data, accidents, by = c('ST_NM' = 'States.UTs'))
#Create a temporary dataframe for analysis purpose
accidents_df <- states@data[,1:5]
#Rename Columns to Year only
colnames(accidents_df) <- gsub("\\D+\\.\\.\\.", "", colnames(df))
library(tidyr)
accidents_df.m <- gather(df, key = "Year", value = "Persons_Injured", colnames(df)[2:5])
library(ggplot2)
p1 <- ggplot(data = df.m[startsWith(df.m$ST_NM, "M"),],
aes(x = Year, y = Persons_Injured)) +
geom_point(aes(size = Persons_Injured, color = Year)) +
facet_wrap(~ST_NM)
p1 + ggtitle("Number of Persons Injured in Road Accidents") +  theme(legend.position = "bottom")
states_df <- broom::tidy(states)
library(dplyr)
# head(states_df, n = 2) # Investigate the tide-ied data
states$id <- row.names(states) #Allocate an id variable to sp data
# head(states@data, n = 2) # A check before we join
states_df <- left_join(states_df, states@data)
map <- ggplot(data = states_df, aes(x = long, y = lat, group = group, fill = State.UT.wise.Total.Number.of.Persons.Injured.in.Road.Accidents.during...2015))+ # define variables
geom_polygon() + # Plot the states
coord_equal() + # fixed x & y scales
labs(x = "longitude", y = "latitude", fill = "Number of Persons_Injured") + #Labels
ggtitle("Road Accidents in India (2015)") + #title
scale_fill_gradient(low = "white", high = "green") #colours
map #Figure 4
# Preparing the Spatial Object
states_df <- left_join(states_df, accidents_df.m)
ggplot(data = states_df,
aes(x = long, y = lat, fill = Persons_Injured, group = group)) + #defining Variables
geom_polygon() + #plot states map
geom_path(colour = "black", lwd = 0.05) + # states borders
coord_equal() + #fixed x and y scales
facet_wrap(~ Year) + # one plot per year
scale_fill_gradient(low = "white", high = "green",
name = "No. of Persons Injured") + # legend options
theme(axis.text = element_blank(), # remove axis lables
axis.title = element_blank(), # remove axis titles
axis.ticks = element_blank()) # remove axis ticks
Output.Areas <- readOGR(dsn = "Data/Camden_oa11/Camden_oa11.shp")
Census.Data <- read.csv("Data/camden_census_data.csv")
OA.census <- merge(Output.Areas, Census.Data, by.x = "OA11CD", by.y = "OA")
# load the pacakges
library(tmap)
qtm(OA.census, fill = "Qualification") #Output not shown
# library(RColorBrewer) # To explore predefined colour ramps using display.brewer.all()
# display.brewer.all()  # To view all color pallets available
tm_shape(OA.census) + tm_fill("Qualification", palette = "-YlOrRd",
style = "pretty", #specify color intervals
legend.hist = TRUE) + #add histogram legend
tm_compass()  #Add north arrow
# load house point files
House.Points <- readOGR(dsn = "Data/Camden_house_sales/Camden_house_sales.shp")
# load the libraries
library(raster)
library(adehabitatHR)
# runs the kernel density estimation, look up the function parameters for more options
kde.output <- kernelUD(House.Points, h="href", grid = 1000)
plot(kde.output)
# converts to raster
kde <- raster(kde.output)
# set the projection to British National Grid, EPSG:27700
projection(kde) <- CRS("+init=EPSG:27700")
# maps the raster in tmap, "ud" is the density variable
tm_shape(kde) + tm_raster("ud")
# creates a bounding box based on the extents of the Output.Areas polygon
bounding_box <- bbox(Output.Areas)
#maps the raster within the bounding box
tm_shape(kde, bbox = bounding_box) + tm_raster("ud")
# mask the raster by the output area polygon
masked_kde <- mask(kde, Output.Areas)
# maps the masked raster, also maps white output area boundaries
tm_shape(masked_kde, bbox = bounding_box) + tm_raster("ud", style = "quantile",
n = 100,
legend.show = FALSE,
palette = "Blues") +
tm_shape(Output.Areas) + tm_borders(alpha = 0.3, col = "white") +
tm_layout(frame = FALSE)
# compute homeranges for 75%, 50%, 25% and 10% of points,
# note : objects are returned as spatial polygons data frames
range75 <- getverticeshr(kde.output, percent = 75)
range50 <- getverticeshr(kde.output, percent = 50)
range25 <- getverticeshr(kde.output, percent = 25)
range10 <- getverticeshr(kde.output, percent = 10)
# the code below creates a map of several layers using tmap
tm_shape(Output.Areas) + tm_borders(alpha=.8, col = "white") +
tm_fill(col = "#f0f0f0") +
tm_shape(House.Points) + tm_dots(col = "blue") +
tm_shape(range75) + tm_borders(alpha = .7, col = "#e57373", lwd = 2) +
tm_fill(alpha =.2, col = "#e57373") +
tm_shape(range50) + tm_borders(alpha = .7, col = "#f44336", lwd = 2) +
tm_fill(alpha =.2, col = "#f44336") +
tm_shape(range25) + tm_borders(alpha = .7, col = "#b71c1c", lwd = 2) +
tm_fill(alpha =.1, col = "#b71c1c") +
tm_shape(range10) + tm_borders(alpha = .7, col = "#d50000", lwd = 2) +
tm_fill(alpha =.1, col = "#d50000") +
tm_layout(frame = FALSE)
library(tidyr)
accidents_df.m <- gather(df, key = "Year", value = "Persons_Injured", colnames(df)[2:5])
library(rgdal)
states_raw <- readOGR(dsn = "Data/States/states.shp", stringsAsFactors = FALSE)
states <- states_raw
slotNames(states)
#We first see the classes of all variables in spatial dataset
sapply(states@data, class)
states@data[startsWith(states$ST_NM, "A"),]
sel <- startsWith(states$ST_NM, "A")
plot(states[sel,])  # See Figure 1
#Plotting initial graph
plot(states, col = "lightgray")
sel <- startsWith(states$ST_NM, "A")
plot(states[sel,], col = "blue", add = TRUE)  #See Figure 2
states@proj4string
# Remove the existing CRS Information first.
proj4string(states) <- NA_character_
proj4string(states) <- CRS("+init=epsg:27700")
library(rgeos)
plot(states, col = "grey")
#Find India geographic centroid
cent_del <- gCentroid(states[states$ST_NM == "NCT of Delhi",])
points(cent_del, cex = 3)
#Set  2° buffer
del_buffer <- gBuffer(spgeom = cent_del, width = 2)
# We first select any intersecting zones
del_central <-  states[del_buffer,]
# Now we plot our selection
plot(del_central, col = "lightblue", add = T)
# Next we highlight the buffer area
plot(del_buffer, add = T, border = "red", lwd = 2)
# Read csv file and Create a new data frame object accidents
accidents_raw<- read.csv("Data/Road_Accidents_2017-Annuxure_Tables_4.csv", stringsAsFactors = FALSE)
accidents <- accidents_raw #Avoid Re-Reading of CSV File
accidents$States.UTs[!accidents$States.UTs %in% states$ST_NM]
states$ST_NM[!states$ST_NM %in% accidents$States.UTs]
states@data <- edit(states@data)
library(dplyr)  #load dplyr
states@data <- inner_join(states@data, accidents, by = c('ST_NM' = 'States.UTs'))
#Create a temporary dataframe for analysis purpose
accidents_df <- states@data[,1:5]
#Rename Columns to Year only
colnames(accidents_df) <- gsub("\\D+\\.\\.\\.", "", colnames(df))
library(tidyr)
accidents_df.m <- gather(df, key = "Year", value = "Persons_Injured", colnames(df)[2:5])
library(tidyr)
accidents_df.m <- pivot_longer(df, colnames(df)[2:5], names_to = "Year", values_to = "Persons_Injured")
#Create a temporary dataframe for analysis purpose
accidents_df <- states@data[,1:5]
#Rename Columns to Year only
colnames(accidents_df) <- gsub("\\D+\\.\\.\\.", "", colnames(accidents_df))
library(tidyr)
accidents_df.m <- pivot_longer(accidents_df, colnames(accidents_df)[2:5], names_to = "Year", values_to = "Persons_Injured")
library(ggplot2)
p1 <- ggplot(data = df.m[startsWith(df.m$ST_NM, "M"),],
aes(x = Year, y = Persons_Injured)) +
geom_point(aes(size = Persons_Injured, color = Year)) +
facet_wrap(~ST_NM)
library(ggplot2)
p1 <- ggplot(data = accidents_df.m[startsWith(df.m$ST_NM, "M"),],
aes(x = Year, y = Persons_Injured)) +
geom_point(aes(size = Persons_Injured, color = Year)) +
facet_wrap(~ST_NM)
library(ggplot2)
p1 <- ggplot(data = accidents_df.m[startsWith(accidents_df.m$ST_NM, "M"),],
aes(x = Year, y = Persons_Injured)) +
geom_point(aes(size = Persons_Injured, color = Year)) +
facet_wrap(~ST_NM)
p1 + ggtitle("Number of Persons Injured in Road Accidents") +  theme(legend.position = "bottom")
states_df <- broom::tidy(states)
library(dplyr)
# head(states_df, n = 2) # Investigate the tide-ied data
states$id <- row.names(states) #Allocate an id variable to sp data
# head(states@data, n = 2) # A check before we join
states_df <- left_join(states_df, states@data)
map <- ggplot(data = states_df, aes(x = long, y = lat, group = group, fill = State.UT.wise.Total.Number.of.Persons.Injured.in.Road.Accidents.during...2015))+ # define variables
geom_polygon() + # Plot the states
coord_equal() + # fixed x & y scales
labs(x = "longitude", y = "latitude", fill = "Number of Persons_Injured") + #Labels
ggtitle("Road Accidents in India (2015)") + #title
scale_fill_gradient(low = "white", high = "green") #colours
map #Figure 4
# Preparing the Spatial Object
states_df <- left_join(states_df, accidents_df.m)
ggplot(data = states_df,
aes(x = long, y = lat, fill = Persons_Injured, group = group)) + #defining Variables
geom_polygon() + #plot states map
geom_path(colour = "black", lwd = 0.05) + # states borders
coord_equal() + #fixed x and y scales
facet_wrap(~ Year) + # one plot per year
scale_fill_gradient(low = "white", high = "green",
name = "No. of Persons Injured") + # legend options
theme(axis.text = element_blank(), # remove axis lables
axis.title = element_blank(), # remove axis titles
axis.ticks = element_blank()) # remove axis ticks
library(rgdal)
states_raw <- readOGR(dsn = "Data/States/states.shp", stringsAsFactors = FALSE)
states <- states_raw
slotNames(states)
#We first see the classes of all variables in spatial dataset
sapply(states@data, class)
states@data[startsWith(states$ST_NM, "A"),]
sel <- startsWith(states$ST_NM, "A")
plot(states[sel,])  # See Figure 1
#Plotting initial graph
plot(states, col = "lightgray")
sel <- startsWith(states$ST_NM, "A")
plot(states[sel,], col = "blue", add = TRUE)  #See Figure 2
states@proj4string
# Remove the existing CRS Information first.
proj4string(states) <- NA_character_
proj4string(states) <- CRS("+init=epsg:27700")
library(rgeos)
plot(states, col = "grey")
#Find India geographic centroid
cent_del <- gCentroid(states[states$ST_NM == "NCT of Delhi",])
points(cent_del, cex = 3)
#Set  2° buffer
del_buffer <- gBuffer(spgeom = cent_del, width = 2)
# We first select any intersecting zones
del_central <-  states[del_buffer,]
# Now we plot our selection
plot(del_central, col = "lightblue", add = T)
# Next we highlight the buffer area
plot(del_buffer, add = T, border = "red", lwd = 2)
# Read csv file and Create a new data frame object accidents
accidents_raw<- read.csv("Data/Road_Accidents_2017-Annuxure_Tables_4.csv", stringsAsFactors = FALSE)
accidents <- accidents_raw #Avoid Re-Reading of CSV File
accidents$States.UTs[!accidents$States.UTs %in% states$ST_NM]
states$ST_NM[!states$ST_NM %in% accidents$States.UTs]
states@data <- edit(states@data)
library(dplyr)  #load dplyr
states@data <- inner_join(states@data, accidents, by = c('ST_NM' = 'States.UTs'))
#Create a temporary dataframe for analysis purpose
accidents_df <- states@data[,1:5]
#Rename Columns to Year only
colnames(accidents_df) <- gsub("\\D+\\.\\.\\.", "", colnames(accidents_df))
library(tidyr)
accidents_df.m <- pivot_longer(accidents_df, colnames(accidents_df)[2:5], names_to = "Year", values_to = "Persons_Injured")
library(ggplot2)
p1 <- ggplot(data = accidents_df.m[startsWith(accidents_df.m$ST_NM, "M"),],
aes(x = Year, y = Persons_Injured)) +
geom_point(aes(size = Persons_Injured, color = Year)) +
facet_wrap(~ST_NM)
p1 + ggtitle("Number of Persons Injured in Road Accidents") +  theme(legend.position = "bottom")
states_df <- broom::tidy(states)
library(dplyr)
# head(states_df, n = 2) # Investigate the tide-ied data
states$id <- row.names(states) #Allocate an id variable to sp data
# head(states@data, n = 2) # A check before we join
states_df <- left_join(states_df, states@data)
map <- ggplot(data = states_df, aes(x = long, y = lat, group = group, fill = State.UT.wise.Total.Number.of.Persons.Injured.in.Road.Accidents.during...2015))+ # define variables
geom_polygon() + # Plot the states
coord_equal() + # fixed x & y scales
labs(x = "longitude", y = "latitude", fill = "Number of Persons_Injured") + #Labels
ggtitle("Road Accidents in India (2015)") + #title
scale_fill_gradient(low = "white", high = "green") #colours
map #Figure 4
# Preparing the Spatial Object
states_df <- left_join(states_df, accidents_df.m)
ggplot(data = states_df,
aes(x = long, y = lat, fill = Persons_Injured, group = group)) + #defining Variables
geom_polygon() + #plot states map
geom_path(colour = "black", lwd = 0.05) + # states borders
coord_equal() + #fixed x and y scales
facet_wrap(~ Year) + # one plot per year
scale_fill_gradient(low = "white", high = "green",
name = "No. of Persons Injured") + # legend options
theme(axis.text = element_blank(), # remove axis lables
axis.title = element_blank(), # remove axis titles
axis.ticks = element_blank()) # remove axis ticks
Output.Areas <- readOGR(dsn = "Data/Camden_oa11/Camden_oa11.shp")
Census.Data <- read.csv("Data/camden_census_data.csv")
OA.census <- merge(Output.Areas, Census.Data, by.x = "OA11CD", by.y = "OA")
# load the pacakges
library(tmap)
qtm(OA.census, fill = "Qualification") #Output not shown
# library(RColorBrewer) # To explore predefined colour ramps using display.brewer.all()
# display.brewer.all()  # To view all color pallets available
tm_shape(OA.census) + tm_fill("Qualification", palette = "-YlOrRd",
style = "pretty", #specify color intervals
legend.hist = TRUE) + #add histogram legend
tm_compass()  #Add north arrow
# load house point files
House.Points <- readOGR(dsn = "Data/Camden_house_sales/Camden_house_sales.shp")
# load the libraries
library(raster)
library(adehabitatHR)
# runs the kernel density estimation, look up the function parameters for more options
kde.output <- kernelUD(House.Points, h="href", grid = 1000)
plot(kde.output)
# converts to raster
kde <- raster(kde.output)
# set the projection to British National Grid, EPSG:27700
projection(kde) <- CRS("+init=EPSG:27700")
# maps the raster in tmap, "ud" is the density variable
tm_shape(kde) + tm_raster("ud")
# creates a bounding box based on the extents of the Output.Areas polygon
bounding_box <- bbox(Output.Areas)
#maps the raster within the bounding box
tm_shape(kde, bbox = bounding_box) + tm_raster("ud")
# mask the raster by the output area polygon
masked_kde <- mask(kde, Output.Areas)
# maps the masked raster, also maps white output area boundaries
tm_shape(masked_kde, bbox = bounding_box) + tm_raster("ud", style = "quantile",
n = 100,
legend.show = FALSE,
palette = "Blues") +
tm_shape(Output.Areas) + tm_borders(alpha = 0.3, col = "white") +
tm_layout(frame = FALSE)
# compute homeranges for 75%, 50%, 25% and 10% of points,
# note : objects are returned as spatial polygons data frames
range75 <- getverticeshr(kde.output, percent = 75)
range50 <- getverticeshr(kde.output, percent = 50)
range25 <- getverticeshr(kde.output, percent = 25)
range10 <- getverticeshr(kde.output, percent = 10)
# the code below creates a map of several layers using tmap
tm_shape(Output.Areas) + tm_borders(alpha=.8, col = "white") +
tm_fill(col = "#f0f0f0") +
tm_shape(House.Points) + tm_dots(col = "blue") +
tm_shape(range75) + tm_borders(alpha = .7, col = "#e57373", lwd = 2) +
tm_fill(alpha =.2, col = "#e57373") +
tm_shape(range50) + tm_borders(alpha = .7, col = "#f44336", lwd = 2) +
tm_fill(alpha =.2, col = "#f44336") +
tm_shape(range25) + tm_borders(alpha = .7, col = "#b71c1c", lwd = 2) +
tm_fill(alpha =.1, col = "#b71c1c") +
tm_shape(range10) + tm_borders(alpha = .7, col = "#d50000", lwd = 2) +
tm_fill(alpha =.1, col = "#d50000") +
tm_layout(frame = FALSE)
x <- "Hello"
a <-  1
b <- 2
print(a+b)
a + b
install.packages("ggsn")
x <- c("sp", "ggplot2", "ggmap", "rgdal", "rgeos", "dplyr", "tidyr", "broom", "ggsn", "adehabitatHR", "tmap", "raster")
# install.packages(x) # warning: uncommenting this may take a number of minutes
lapply(x, library, character.only = TRUE) # load the required packages
library(rgdal)
states_raw <- readOGR(dsn = "Data/States/states.shp", stringsAsFactors = FALSE)
states <- states_raw
View(states)
plot(states) # Not shown, will plot the shapefile
library(rgeos)
plot(states, col = "grey")
#Find India geographic centroid
cent_del <- gCentroid(states[states$ST_NM == "NCT of Delhi",])
points(cent_del, cex = 3)
#Set  2° buffer
del_buffer <- gBuffer(spgeom = cent_del, width = 2)
# We first select any intersecting zones
del_central <-  states[del_buffer,]
# Now we plot our selection
plot(del_central, col = "lightblue", add = T)
# Next we highlight the buffer area
plot(del_buffer, add = T, border = "red", lwd = 2)
states@data <- edit(states@data)
library(dplyr)  #load dplyr
states@data <- inner_join(states@data, accidents, by = c('ST_NM' = 'States.UTs'))
# Read csv file and Create a new data frame object accidents
accidents_raw<- read.csv("Data/Road_Accidents_2017-Annuxure_Tables_4.csv", stringsAsFactors = FALSE)
accidents <- accidents_raw #Avoid Re-Reading of CSV File
library(dplyr)  #load dplyr
states@data <- inner_join(states@data, accidents, by = c('ST_NM' = 'States.UTs'))
View(states)
#Create a temporary dataframe for analysis purpose
accidents_df <- states@data[,1:5]
#Rename Columns to Year only
colnames(accidents_df) <- gsub("\\D+\\.\\.\\.", "", colnames(accidents_df))
library(tidyr)
accidents_df.m <- pivot_longer(accidents_df, colnames(accidents_df)[2:5], names_to = "Year", values_to = "Persons_Injured")
View(accidents_df.m)
library(ggplot2)
p1 <- ggplot(data = accidents_df.m[startsWith(accidents_df.m$ST_NM, "M"),],
aes(x = Year, y = Persons_Injured)) +
geom_point(aes(size = Persons_Injured, color = Year)) +
facet_wrap(~ST_NM)
p1 + ggtitle("Number of Persons Injured in Road Accidents") +  theme(legend.position = "bottom")
states_df <- broom::tidy(states)
library(dplyr)
# head(states_df, n = 2) # Investigate the tide-ied data
states$id <- row.names(states) #Allocate an id variable to sp data
# head(states@data, n = 2) # A check before we join
states_df <- left_join(states_df, states@data)
map <- ggplot(data = states_df, aes(x = long, y = lat, group = group, fill = State.UT.wise.Total.Number.of.Persons.Injured.in.Road.Accidents.during...2015))+ # define variables
geom_polygon() + # Plot the states
coord_equal() + # fixed x & y scales
labs(x = "longitude", y = "latitude", fill = "Number of Persons_Injured") + #Labels
ggtitle("Road Accidents in India (2015)") + #title
scale_fill_gradient(low = "white", high = "green") #colours
map #Figure 4
map + ggsn::blank() + ggsn::north(states_df) #Output not shown.
# Preparing the Spatial Object
states_df <- left_join(states_df, accidents_df.m)
ggplot(data = states_df,
aes(x = long, y = lat, fill = Persons_Injured, group = group)) + #defining Variables
geom_polygon() + #plot states map
geom_path(colour = "black", lwd = 0.05) + # states borders
coord_equal() + #fixed x and y scales
facet_wrap(~ Year) + # one plot per year
scale_fill_gradient(low = "white", high = "green",
name = "No. of Persons Injured") + # legend options
theme(axis.text = element_blank(), # remove axis lables
axis.title = element_blank(), # remove axis titles
axis.ticks = element_blank()) # remove axis ticks
# Read csv file and Create a new data frame object accidents
accidents_raw<- read.csv("Data/Road_Accidents_2017-Annuxure_Tables_4.csv", stringsAsFactors = FALSE)
accidents <- accidents_raw #Avoid Re-Reading of CSV File
accidents$States.UTs[!accidents$States.UTs %in% states$ST_NM]
states$ST_NM[!states$ST_NM %in% accidents$States.UTs]
states@data <- edit(states@data)
library(dplyr)  #load dplyr
states@data <- inner_join(states@data, accidents, by = c('ST_NM' = 'States.UTs'))
#Create a temporary dataframe for analysis purpose
accidents_df <- states@data[,1:5]
#Rename Columns to Year only
colnames(accidents_df) <- gsub("\\D+\\.\\.\\.", "", colnames(accidents_df))
library(tidyr)
accidents_df.m <- pivot_longer(accidents_df, colnames(accidents_df)[2:5], names_to = "Year", values_to = "Persons_Injured")
library(ggplot2)
p1 <- ggplot(data = accidents_df.m[startsWith(accidents_df.m$ST_NM, "M"),],
aes(x = Year, y = Persons_Injured)) +
geom_point(aes(size = Persons_Injured, color = Year)) +
facet_wrap(~ST_NM)
p1 + ggtitle("Number of Persons Injured in Road Accidents") +  theme(legend.position = "bottom")
states_df <- broom::tidy(states)
library(dplyr)
# head(states_df, n = 2) # Investigate the tide-ied data
states$id <- row.names(states) #Allocate an id variable to sp data
# head(states@data, n = 2) # A check before we join
states_df <- left_join(states_df, states@data)
map <- ggplot(data = states_df, aes(x = long, y = lat, group = group, fill = State.UT.wise.Total.Number.of.Persons.Injured.in.Road.Accidents.during...2015))+ # define variables
geom_polygon() + # Plot the states
coord_equal() + # fixed x & y scales
labs(x = "longitude", y = "latitude", fill = "Number of Persons_Injured") + #Labels
ggtitle("Road Accidents in India (2015)") + #title
scale_fill_gradient(low = "white", high = "green") #colours
map #Figure 4
# load house point files
House.Points <- readOGR(dsn = "Data/Camden_house_sales/Camden_house_sales.shp")
